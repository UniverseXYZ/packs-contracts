/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PacksTokenInfoFacetInterface extends ethers.utils.Interface {
  functions: {
    "addNewLicense(string)": FunctionFragment;
    "addSecondaryVersion(uint256,string)": FunctionFragment;
    "addVersion(uint256,string)": FunctionFragment;
    "getLicense()": FunctionFragment;
    "getLicenseVersion(uint256)": FunctionFragment;
    "updateMetadata(uint256,uint256,string)": FunctionFragment;
    "updateSecondaryVersion(uint256,uint256)": FunctionFragment;
    "updateVersion(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addNewLicense",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSecondaryVersion",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addVersion",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicense",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSecondaryVersion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVersion",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSecondaryVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLicense", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSecondaryVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVersion",
    data: BytesLike
  ): Result;

  events: {};
}

export class PacksTokenInfoFacet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PacksTokenInfoFacetInterface;

  functions: {
    addNewLicense(
      _license: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addNewLicense(string)"(
      _license: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addSecondaryVersion(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addSecondaryVersion(uint256,string)"(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addVersion(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addVersion(uint256,string)"(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLicense(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getLicense()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getLicenseVersion(
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getLicenseVersion(uint256)"(
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    updateMetadata(
      collectibleId: BigNumberish,
      propertyIndex: BigNumberish,
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMetadata(uint256,uint256,string)"(
      collectibleId: BigNumberish,
      propertyIndex: BigNumberish,
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateSecondaryVersion(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateSecondaryVersion(uint256,uint256)"(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateVersion(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateVersion(uint256,uint256)"(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addNewLicense(
    _license: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addNewLicense(string)"(
    _license: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addSecondaryVersion(
    collectibleNumber: BigNumberish,
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addSecondaryVersion(uint256,string)"(
    collectibleNumber: BigNumberish,
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addVersion(
    collectibleNumber: BigNumberish,
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addVersion(uint256,string)"(
    collectibleNumber: BigNumberish,
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLicense(overrides?: CallOverrides): Promise<string>;

  "getLicense()"(overrides?: CallOverrides): Promise<string>;

  getLicenseVersion(
    versionNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getLicenseVersion(uint256)"(
    versionNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updateMetadata(
    collectibleId: BigNumberish,
    propertyIndex: BigNumberish,
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMetadata(uint256,uint256,string)"(
    collectibleId: BigNumberish,
    propertyIndex: BigNumberish,
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateSecondaryVersion(
    collectibleNumber: BigNumberish,
    versionNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateSecondaryVersion(uint256,uint256)"(
    collectibleNumber: BigNumberish,
    versionNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateVersion(
    collectibleNumber: BigNumberish,
    versionNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateVersion(uint256,uint256)"(
    collectibleNumber: BigNumberish,
    versionNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addNewLicense(_license: string, overrides?: CallOverrides): Promise<void>;

    "addNewLicense(string)"(
      _license: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSecondaryVersion(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSecondaryVersion(uint256,string)"(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addVersion(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addVersion(uint256,string)"(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getLicense(overrides?: CallOverrides): Promise<string>;

    "getLicense()"(overrides?: CallOverrides): Promise<string>;

    getLicenseVersion(
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getLicenseVersion(uint256)"(
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updateMetadata(
      collectibleId: BigNumberish,
      propertyIndex: BigNumberish,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMetadata(uint256,uint256,string)"(
      collectibleId: BigNumberish,
      propertyIndex: BigNumberish,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSecondaryVersion(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSecondaryVersion(uint256,uint256)"(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVersion(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateVersion(uint256,uint256)"(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addNewLicense(_license: string, overrides?: Overrides): Promise<BigNumber>;

    "addNewLicense(string)"(
      _license: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addSecondaryVersion(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addSecondaryVersion(uint256,string)"(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addVersion(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addVersion(uint256,string)"(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getLicense(overrides?: CallOverrides): Promise<BigNumber>;

    "getLicense()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLicenseVersion(
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLicenseVersion(uint256)"(
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMetadata(
      collectibleId: BigNumberish,
      propertyIndex: BigNumberish,
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMetadata(uint256,uint256,string)"(
      collectibleId: BigNumberish,
      propertyIndex: BigNumberish,
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateSecondaryVersion(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateSecondaryVersion(uint256,uint256)"(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateVersion(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateVersion(uint256,uint256)"(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewLicense(
      _license: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addNewLicense(string)"(
      _license: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addSecondaryVersion(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addSecondaryVersion(uint256,string)"(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addVersion(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addVersion(uint256,string)"(
      collectibleNumber: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLicense(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLicense()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLicenseVersion(
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLicenseVersion(uint256)"(
      versionNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMetadata(
      collectibleId: BigNumberish,
      propertyIndex: BigNumberish,
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMetadata(uint256,uint256,string)"(
      collectibleId: BigNumberish,
      propertyIndex: BigNumberish,
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateSecondaryVersion(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateSecondaryVersion(uint256,uint256)"(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateVersion(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateVersion(uint256,uint256)"(
      collectibleNumber: BigNumberish,
      versionNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
