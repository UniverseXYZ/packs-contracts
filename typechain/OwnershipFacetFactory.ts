/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { OwnershipFacet } from "./OwnershipFacet";

export class OwnershipFacetFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<OwnershipFacet> {
    return super.deploy(overrides || {}) as Promise<OwnershipFacet>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OwnershipFacet {
    return super.attach(address) as OwnershipFacet;
  }
  connect(signer: Signer): OwnershipFacetFactory {
    return super.connect(signer) as OwnershipFacetFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnershipFacet {
    return new Contract(address, _abi, signerOrProvider) as OwnershipFacet;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061031f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b1461006c575b600080fd5b6100436100a1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61009f6004803603602081101561008257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100b0565b005b60006100ab6100c4565b905090565b6100b86100ed565b6100c181610152565b50565b60006100ce610231565b6003015473ffffffffffffffffffffffffffffffffffffffff16919050565b6100f5610231565b6003015473ffffffffffffffffffffffffffffffffffffffff163314610150576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610147906102b2565b60405180910390fd5b565b600061015c610231565b600381015490915073ffffffffffffffffffffffffffffffffffffffff9081169083168114156101b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014790610255565b6003820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85811691821790925560405190918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6020808252602e908201527f50726576696f7573206f776e657220616e64206e6577206f776e6572206d757360408201527f7420626520646966666572656e74000000000000000000000000000000000000606082015260800190565b60208082526016908201527f4d75737420626520636f6e7472616374206f776e65720000000000000000000060408201526060019056fea2646970667358221220808536b77e7a45850427f9d112a4a4fe0be83ce7dbea7a90dfeeba749347558964736f6c63430007060033";
