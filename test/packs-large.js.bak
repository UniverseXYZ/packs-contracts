const { expect } = require("chai");
const { utils } = require('ethers')
const mock = require('./mock-large.json');

function base64toJSON(string) {
  return JSON.parse(Buffer.from(string.replace('data:application/json;base64,',''), 'base64').toString())
}

describe("Large Packs", function() {
  const collectionName = 'RELICS INSTINCT';
  const collectionSymbol = 'MONSTERCAT';
  const baseURI = 'https://arweave.net/';
  const licenseURI = 'https://arweave.net/license';
  const editioned = true;
  const tokenPrice = ethers.utils.parseEther("0.0007");
  const bulkBuyLimit = 50;
  const nullAddress = '0x0000000000000000000000000000000000000000';
  const mintPassAddress = '0x164cb8bf056ffb41e4819cbb669bd89476d81279';
  const mintPassDuration = 600; // 600 = 10 minutes, 3600 = 1 hour
  const saleStartTime = Math.round((new Date()).getTime() / 1000) + mintPassDuration;
  const metadata = mock.data;
  const tokenCounts = [Number(metadata[0].coreData[2]), Number(metadata[1].coreData[2]), Number(metadata[2].coreData[2])];

  let totalTokenCount = 0;
  tokenCounts.forEach(e => totalTokenCount += e);

  let packsInstance;
  const randomWallet1 = ethers.Wallet.createRandom();
  const randomWallet2 = ethers.Wallet.createRandom();
  const feeSplit1 = 1000;
  const feeSplit2 = 500;

  before(async () => {
    const LibPackStorage = await hre.ethers.getContractFactory("LibPackStorage");
    const libraryInstance = await LibPackStorage.deploy();
    await libraryInstance.deployed();

    const Packs = await ethers.getContractFactory("Packs", {
      libraries: {
        LibPackStorage: libraryInstance.address
      },
    });

    packsInstance = await Packs.deploy(
      collectionName,
      collectionSymbol,
      baseURI,
      editioned,
      [tokenPrice, bulkBuyLimit, saleStartTime],
      licenseURI,
      nullAddress, // mintPassAddress or nullAddress for no mint pass
      mintPassDuration
    );
    await packsInstance.deployed();
  });

  it("should create collectible", async function() {
    const fees = [[randomWallet1.address, feeSplit1], [randomWallet2.address, feeSplit2]];
    await packsInstance.addCollectible(0, metadata[0].coreData, metadata[0].assets, metadata[0].metaData, metadata[0].secondaryMetaData);
  });

  it("should bulk add collectible", async function() {
    for (let i = 1; i < 3; i++) {
      const coreData = [metadata[i].coreData];
      const assets = [metadata[i].assets];
      const secondaryMetaData = [metadata[i].secondaryMetaData];
      const metaData = [metadata[i].metaData];
      const fees = [
        [[randomWallet2.address, feeSplit1], [randomWallet1.address, feeSplit2]],
      ];
      await packsInstance.bulkAddCollectible(0, coreData, assets, metaData, secondaryMetaData);
    }
  });

  // it("should mint all tokens", async function() {
  //   await ethers.provider.send('evm_setNextBlockTimestamp', [saleStartTime]);
  //   await ethers.provider.send('evm_mine');

  //   for (i = 0; i < 8000; i++) {
  //     if (i % 100 === 0) console.log('MINTING', i);
  //     await packsInstance.mintPack(0, {value: tokenPrice });
  //   }
  // });
});
