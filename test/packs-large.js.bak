const { expect } = require("chai");
const { utils } = require('ethers')
const mock = require('./mock-large.json');

function base64toJSON(string) {
  return JSON.parse(Buffer.from(string.replace('data:application/json;base64,',''), 'base64').toString())
}

describe("Large Packs", function() {
  const baseURI = 'https://arweave.net/';
  const tokenPrice = ethers.utils.parseEther("0.0777");
  const bulkBuyLimit = 50;
  const saleStartTime = 1948372;
  const metadata = mock.data;
  const tokenCounts = [Number(metadata[0].coreData[2]), Number(metadata[1].coreData[2]), Number(metadata[2].coreData[2]), Number(metadata[3].coreData[2])];

  let totalTokenCount = 0;
  tokenCounts.forEach(e => totalTokenCount += e);

  let packsInstance;
  const randomWallet1 = ethers.Wallet.createRandom();
  const randomWallet2 = ethers.Wallet.createRandom();
  const feeSplit1 = 1000;
  const feeSplit2 = 500;

  before(async () => {
    const Packs = await ethers.getContractFactory("Packs");
    packsInstance = await Packs.deploy(
      'Relics',
      'MONSTERCAT',
      baseURI,
      true,
      [tokenPrice, bulkBuyLimit, saleStartTime],
      'https://arweave.net/license',
    );
    await packsInstance.deployed();
  });

  it("should create collectible", async function() {
    const fees = [[randomWallet1.address, feeSplit1], [randomWallet2.address, feeSplit2]];
    await packsInstance.addCollectible(metadata[0].coreData, metadata[0].assets, metadata[0].secondaryAssets, metadata[0].metaData, fees);
  });

  it("should bulk add collectible", async function() {
    for (let i = 1; i < 4; i++) {
      const coreData = [metadata[i].coreData];
      const assets = [metadata[i].assets];
      const secondaryAssets = [metadata[i].secondaryAssets];
      const metaData = [metadata[i].metaData];
      const fees = [
        [[randomWallet2.address, feeSplit1], [randomWallet1.address, feeSplit2]],
      ];
      await packsInstance.bulkAddCollectible(coreData, assets, secondaryAssets, metaData, fees);
    }
  });

  it("should match the total token count", async function() {
    expect((await packsInstance.totalTokenCount())).to.equal(totalTokenCount);
  });

  it("should reject mints with insufficient funds", async function() {
    expect(packsInstance.functions['mint()']({value: tokenPrice.div(2) })).to.be.reverted;
    expect(packsInstance.bulkMint(50, {value: tokenPrice.mul(49) })).to.be.reverted;
  });

  // it("should bulk mint all tokens", async function() {
  //   const bulkCount = bulkBuyLimit;
  //   expect(packsInstance.bulkMint(10000, {value: tokenPrice.mul(10000) })).to.be.reverted;

  //   for (i = 0; i < 80; i++) {
  //     await packsInstance.bulkMint(bulkCount, {value: tokenPrice.mul(bulkCount) });
  //   }
  // });

  it("should mint all tokens", async function() {
    for (i = 0; i < 8000; i++) {
      console.log('MINTING', i);
      await packsInstance.functions['mint()']({value: tokenPrice})
    }
  });

  // it("metadata should match and be updated", async function() {
  //   const yo = await packsInstance.tokenURI(100008);
  //   const tokenJSON = base64toJSON(yo);
  //   expect(tokenJSON.name).to.equal(`${ metadata[0].coreData[0] } #8`);
  //   expect(tokenJSON.description).to.equal(metadata[0].coreData[1]);
  //   expect(tokenJSON.image).to.equal(`${ baseURI }one`);
  //   expect(tokenJSON.attributes[0].trait_type).to.equal(metadata[0].metaData[0][0]);
  //   expect(tokenJSON.attributes[0].value).to.equal(metadata[0].metaData[0][1]);
  // });

  // it ("should update metadata", async function() {
  //   const newMetadata = 'new new';
  //   await packsInstance.updateMetadata(1, 0, newMetadata);
  //   const tokenJSON = base64toJSON(await packsInstance.tokenURI(100008));
  //   expect(tokenJSON.attributes[0].trait_type).to.equal(metadata[0].metaData[0][0]);
  //   expect(tokenJSON.attributes[0].value).to.equal(newMetadata);
  // });

  // it ("should not be able to update permanent metadata", async function() {
  //   expect(packsInstance.updateMetadata(1, 1, 'should not update')).to.be.reverted;
  // });

  // it("should update image asset and version", async function() {
  //   await packsInstance.addVersion(1, 'fourrrrrrr');
  //   await packsInstance.updateVersion(1, 4);
  //   const tokenJSON = base64toJSON(await packsInstance.tokenURI(100008));
  //   expect(tokenJSON.image).to.equal(`${ baseURI }fourrrrrrr`);
  // });

  // it("should update secondary asset and version", async function() {
  //   await packsInstance.addSecondaryVersion(3, 'secondaryAsset3Version3');
  //   await packsInstance.updateSecondaryVersion(3, 3);
  //   const tokenJSON = base64toJSON(await packsInstance.tokenURI(300777));
  //   expect(tokenJSON.secondaryAsset).to.equal(`${ baseURI }secondaryAsset3Version3`);
  // });

  // it("should add new license version", async function() {
  //   const license = await packsInstance.getLicense();
  //   expect(license).to.equal('https://arweave.net/license');

  //   await packsInstance.addNewLicense('https://arweave.net/new-license');
  //   const updatedLicense = await packsInstance.getLicense();
  //   expect(updatedLicense).to.equal('https://arweave.net/new-license');
  // });

  // it("should have original license", async function() {
  //   const license = await packsInstance.getLicenseVersion(1);
  //   expect(license).to.equal('https://arweave.net/license');
  // })
});
